// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "07/06/2025 16:52:47"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    moving_average_filter
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module moving_average_filter_vlg_sample_tst(
	CLK,
	DATA_IN,
	NEW_DATA_VALID,
	RST,
	sampler_tx
);
input  CLK;
input [7:0] DATA_IN;
input  NEW_DATA_VALID;
input  RST;
output sampler_tx;

reg sample;
time current_time;
always @(CLK or DATA_IN or NEW_DATA_VALID or RST)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module moving_average_filter_vlg_check_tst (
	DATA_OUT,
	DATA_OUT_VALID,
	sampler_rx
);
input [7:0] DATA_OUT;
input  DATA_OUT_VALID;
input sampler_rx;

reg [7:0] DATA_OUT_expected;
reg  DATA_OUT_VALID_expected;

reg [7:0] DATA_OUT_prev;
reg  DATA_OUT_VALID_prev;

reg [7:0] DATA_OUT_expected_prev;
reg  DATA_OUT_VALID_expected_prev;

reg [7:0] last_DATA_OUT_exp;
reg  last_DATA_OUT_VALID_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:2] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 2'b1;
end

// update real /o prevs

always @(trigger)
begin
	DATA_OUT_prev = DATA_OUT;
	DATA_OUT_VALID_prev = DATA_OUT_VALID;
end

// update expected /o prevs

always @(trigger)
begin
	DATA_OUT_expected_prev = DATA_OUT_expected;
	DATA_OUT_VALID_expected_prev = DATA_OUT_VALID_expected;
end


// expected DATA_OUT[ 7 ]
initial
begin
	DATA_OUT_expected[7] = 1'bX;
end 
// expected DATA_OUT[ 6 ]
initial
begin
	DATA_OUT_expected[6] = 1'bX;
end 
// expected DATA_OUT[ 5 ]
initial
begin
	DATA_OUT_expected[5] = 1'bX;
end 
// expected DATA_OUT[ 4 ]
initial
begin
	DATA_OUT_expected[4] = 1'bX;
end 
// expected DATA_OUT[ 3 ]
initial
begin
	DATA_OUT_expected[3] = 1'bX;
end 
// expected DATA_OUT[ 2 ]
initial
begin
	DATA_OUT_expected[2] = 1'bX;
end 
// expected DATA_OUT[ 1 ]
initial
begin
	DATA_OUT_expected[1] = 1'bX;
end 
// expected DATA_OUT[ 0 ]
initial
begin
	DATA_OUT_expected[0] = 1'bX;
end 

// expected DATA_OUT_VALID
initial
begin
	DATA_OUT_VALID_expected = 1'bX;
end 
// generate trigger
always @(DATA_OUT_expected or DATA_OUT or DATA_OUT_VALID_expected or DATA_OUT_VALID)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected DATA_OUT = %b | expected DATA_OUT_VALID = %b | ",DATA_OUT_expected_prev,DATA_OUT_VALID_expected_prev);
	$display("| real DATA_OUT = %b | real DATA_OUT_VALID = %b | ",DATA_OUT_prev,DATA_OUT_VALID_prev);
`endif
	if (
		( DATA_OUT_expected_prev[0] !== 1'bx ) && ( DATA_OUT_prev[0] !== DATA_OUT_expected_prev[0] )
		&& ((DATA_OUT_expected_prev[0] !== last_DATA_OUT_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_OUT[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_OUT_expected_prev);
		$display ("     Real value = %b", DATA_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DATA_OUT_exp[0] = DATA_OUT_expected_prev[0];
	end
	if (
		( DATA_OUT_expected_prev[1] !== 1'bx ) && ( DATA_OUT_prev[1] !== DATA_OUT_expected_prev[1] )
		&& ((DATA_OUT_expected_prev[1] !== last_DATA_OUT_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_OUT[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_OUT_expected_prev);
		$display ("     Real value = %b", DATA_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DATA_OUT_exp[1] = DATA_OUT_expected_prev[1];
	end
	if (
		( DATA_OUT_expected_prev[2] !== 1'bx ) && ( DATA_OUT_prev[2] !== DATA_OUT_expected_prev[2] )
		&& ((DATA_OUT_expected_prev[2] !== last_DATA_OUT_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_OUT[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_OUT_expected_prev);
		$display ("     Real value = %b", DATA_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DATA_OUT_exp[2] = DATA_OUT_expected_prev[2];
	end
	if (
		( DATA_OUT_expected_prev[3] !== 1'bx ) && ( DATA_OUT_prev[3] !== DATA_OUT_expected_prev[3] )
		&& ((DATA_OUT_expected_prev[3] !== last_DATA_OUT_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_OUT[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_OUT_expected_prev);
		$display ("     Real value = %b", DATA_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DATA_OUT_exp[3] = DATA_OUT_expected_prev[3];
	end
	if (
		( DATA_OUT_expected_prev[4] !== 1'bx ) && ( DATA_OUT_prev[4] !== DATA_OUT_expected_prev[4] )
		&& ((DATA_OUT_expected_prev[4] !== last_DATA_OUT_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_OUT[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_OUT_expected_prev);
		$display ("     Real value = %b", DATA_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DATA_OUT_exp[4] = DATA_OUT_expected_prev[4];
	end
	if (
		( DATA_OUT_expected_prev[5] !== 1'bx ) && ( DATA_OUT_prev[5] !== DATA_OUT_expected_prev[5] )
		&& ((DATA_OUT_expected_prev[5] !== last_DATA_OUT_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_OUT[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_OUT_expected_prev);
		$display ("     Real value = %b", DATA_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DATA_OUT_exp[5] = DATA_OUT_expected_prev[5];
	end
	if (
		( DATA_OUT_expected_prev[6] !== 1'bx ) && ( DATA_OUT_prev[6] !== DATA_OUT_expected_prev[6] )
		&& ((DATA_OUT_expected_prev[6] !== last_DATA_OUT_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_OUT[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_OUT_expected_prev);
		$display ("     Real value = %b", DATA_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DATA_OUT_exp[6] = DATA_OUT_expected_prev[6];
	end
	if (
		( DATA_OUT_expected_prev[7] !== 1'bx ) && ( DATA_OUT_prev[7] !== DATA_OUT_expected_prev[7] )
		&& ((DATA_OUT_expected_prev[7] !== last_DATA_OUT_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_OUT[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_OUT_expected_prev);
		$display ("     Real value = %b", DATA_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DATA_OUT_exp[7] = DATA_OUT_expected_prev[7];
	end
	if (
		( DATA_OUT_VALID_expected_prev !== 1'bx ) && ( DATA_OUT_VALID_prev !== DATA_OUT_VALID_expected_prev )
		&& ((DATA_OUT_VALID_expected_prev !== last_DATA_OUT_VALID_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_OUT_VALID :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_OUT_VALID_expected_prev);
		$display ("     Real value = %b", DATA_OUT_VALID_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DATA_OUT_VALID_exp = DATA_OUT_VALID_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module moving_average_filter_vlg_vec_tst();
// constants                                           
// general purpose registers
reg CLK;
reg [7:0] DATA_IN;
reg NEW_DATA_VALID;
reg RST;
// wires                                               
wire [7:0] DATA_OUT;
wire DATA_OUT_VALID;

wire sampler;                             

// assign statements (if any)                          
moving_average_filter i1 (
// port map - connection between master ports and signals/registers   
	.CLK(CLK),
	.DATA_IN(DATA_IN),
	.DATA_OUT(DATA_OUT),
	.DATA_OUT_VALID(DATA_OUT_VALID),
	.NEW_DATA_VALID(NEW_DATA_VALID),
	.RST(RST)
);

// CLK
always
begin
	CLK = 1'b0;
	CLK = #10000 1'b1;
	#10000;
end 

// RST
initial
begin
	RST = 1'b1;
	RST = #40000 1'b0;
end 

// NEW_DATA_VALID
initial
begin
	NEW_DATA_VALID = 1'b0;
	NEW_DATA_VALID = #60000 1'b1;
	NEW_DATA_VALID = #20000 1'b0;
	NEW_DATA_VALID = #40000 1'b1;
	NEW_DATA_VALID = #20000 1'b0;
	NEW_DATA_VALID = #40000 1'b1;
	NEW_DATA_VALID = #20000 1'b0;
	NEW_DATA_VALID = #40000 1'b1;
	NEW_DATA_VALID = #20000 1'b0;
	NEW_DATA_VALID = #40000 1'b1;
	NEW_DATA_VALID = #20000 1'b0;
	NEW_DATA_VALID = #40000 1'b1;
	NEW_DATA_VALID = #20000 1'b0;
	NEW_DATA_VALID = #40000 1'b1;
	NEW_DATA_VALID = #20000 1'b0;
	NEW_DATA_VALID = #40000 1'b1;
	NEW_DATA_VALID = #20000 1'b0;
	NEW_DATA_VALID = #40000 1'b1;
	NEW_DATA_VALID = #20000 1'b0;
	NEW_DATA_VALID = #40000 1'b1;
	NEW_DATA_VALID = #20000 1'b0;
	NEW_DATA_VALID = #40000 1'b1;
	NEW_DATA_VALID = #20000 1'b0;
	NEW_DATA_VALID = #40000 1'b1;
	NEW_DATA_VALID = #20000 1'b0;
	NEW_DATA_VALID = #40000 1'b1;
	NEW_DATA_VALID = #20000 1'b0;
	NEW_DATA_VALID = #40000 1'b1;
	NEW_DATA_VALID = #20000 1'b0;
	NEW_DATA_VALID = #40000 1'b1;
	NEW_DATA_VALID = #20000 1'b0;
	NEW_DATA_VALID = #40000 1'b1;
	NEW_DATA_VALID = #20000 1'b0;
end 
// DATA_IN[ 7 ]
initial
begin
	DATA_IN[7] = 1'b0;
end 
// DATA_IN[ 6 ]
initial
begin
	DATA_IN[6] = 1'b0;
end 
// DATA_IN[ 5 ]
initial
begin
	DATA_IN[5] = 1'b0;
	DATA_IN[5] = #300000 1'b1;
	DATA_IN[5] = #60000 1'b0;
end 
// DATA_IN[ 4 ]
initial
begin
	DATA_IN[4] = 1'b0;
	DATA_IN[4] = #240000 1'b1;
	DATA_IN[4] = #60000 1'b0;
end 
// DATA_IN[ 3 ]
initial
begin
	DATA_IN[3] = 1'b0;
	DATA_IN[3] = #120000 1'b1;
	DATA_IN[3] = #120000 1'b0;
	DATA_IN[3] = #60000 1'b1;
	DATA_IN[3] = #60000 1'b0;
end 
// DATA_IN[ 2 ]
initial
begin
	DATA_IN[2] = 1'b0;
	DATA_IN[2] = #60000 1'b1;
	DATA_IN[2] = #60000 1'b0;
	DATA_IN[2] = #60000 1'b1;
	DATA_IN[2] = #120000 1'b0;
end 
// DATA_IN[ 1 ]
initial
begin
	DATA_IN[1] = 1'b0;
	DATA_IN[1] = #120000 1'b1;
	DATA_IN[1] = #120000 1'b0;
	DATA_IN[1] = #60000 1'b1;
	DATA_IN[1] = #60000 1'b0;
end 
// DATA_IN[ 0 ]
initial
begin
	DATA_IN[0] = 1'b0;
	DATA_IN[0] = #60000 1'b1;
	DATA_IN[0] = #60000 1'b0;
	DATA_IN[0] = #60000 1'b1;
	DATA_IN[0] = #60000 1'b0;
end 

moving_average_filter_vlg_sample_tst tb_sample (
	.CLK(CLK),
	.DATA_IN(DATA_IN),
	.NEW_DATA_VALID(NEW_DATA_VALID),
	.RST(RST),
	.sampler_tx(sampler)
);

moving_average_filter_vlg_check_tst tb_out(
	.DATA_OUT(DATA_OUT),
	.DATA_OUT_VALID(DATA_OUT_VALID),
	.sampler_rx(sampler)
);
endmodule

